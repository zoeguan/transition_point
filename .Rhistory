}
}
mat[ndat+1,] = 1
mat[,ndat+1] = c(rep(-1, ndat), 0)
#C = mat[1:ndat, 1:ndat]
#J= rep(1, 4)
#solve(C) %*% J %*% solve(t(J) %*% solve(C) %*% J)
cor.mat = matrix(nrow=ndat, ncol=ndat)
for (i in 1:ndat) {
for (j in 1:ndat) {
cor.mat[i, j ] = cor(Bk[[i]], Bk[[j]])
}
}
ws[q, ] = ((solve(mat) %*% c(rep(0, ndat), 1))[1:ndat])
cs[q, ] = mean(cor.mat[4,])
bs[q] = mean(Bk[[1]])
#cs[1, 1] = cor(Bk[[1]], Bk[[4]])
}
cs2 = rbind(cs, cs1)
ws2 = rbind(ws, ws1)
qplot(cs2[, 4], ws2[, 4], xlab="correlation with other studies", ylab="weight")
num = 300
cs = matrix(nrow=num, ncol=4)
bs = rep(NA, num)
ws = matrix(nrow=num, ncol=4)
for (q in 1:num) {
# merged design matrix
set.seed(q)
#edat_train[[1]] = edat_train[[2]]
edat_train[[4]] = edat_train[[1]] - matrix(rnorm(nvar*40, 0, 0.006*q), nrow=40, ncol=nvar)
Rk = vector(mode="list", length=ndat)
# M_k = R_k + \lambdak * I^-
Mk = vector(mode="list", length=ndat)
Bk = vector(mode="list", length=ndat)
denom2k = vector(mode="list", length=ndat)
num1k = vector(mode="list", length=ndat)
Ck = rep(NA, ndat)
sigma = 0.1
lambdak = c(2, 2, 2, 2)
for (k in 1:ndat) {
Xk = as.matrix(edat_train[[k]])[, 1:nvar]
Rk[[k]] = t(Xk) %*% Xk
Mk[[k]] = Rk[[k]] + lambdak[k]*I #%*% solve(scale_mat_k[[k]]) %*% solve(scale_mat_k[[k]])
#denom2k[[k]] = wk[k]^2 * Rk[[k]] %*% solve(Mk[[k]]) %*%  t(test_mat) %*% test_mat %*% solve(Mk[[k]]) %*% Rk[[k]]
# solve(Mk) %*% Rk %*% Rk %*% solve(Mk) %*% R0
Ck[k] = sigma^2 * tr(solve(Mk[[k]]) %*% solve(Mk[[k]]) %*% t(test_mat[, 1:nvar]) %*% test_mat[, 1:nvar] %*% Rk[[k]] %*% Rk[[k]]) +
sigma_eps^2*tr(solve(Mk[[k]]) %*% Rk[[k]] %*% solve(Mk[[k]]) %*% t(test_mat[, 1:nvar]) %*% test_mat[, 1:nvar])
#num1k[[k]] = wk[k]^2 * tr(test_mat %*% solve(Mk[[k]]) %*% Rk[[k]] %*% solve(Mk[[k]]) %*% t(test_mat))
Bk[[k]] = lambdak[k]*test_mat[, 1:nvar] %*% solve(Mk[[k]]) %*% beta[1:nvar]
}
mat = matrix(NA, ncol=ndat+1,nrow=ndat+1)
for (i in 1:ndat) {
for (j in 1:ndat) {
if(i==j) {
mat[i, j] = 2*Ck[i] + 2*t(Bk[[i]]) %*% Bk[[i]]
} else {
mat[i, j] =  t(Bk[[i]] ) %*% Bk[[j]]
}
}
}
mat[ndat+1,] = 1
mat[,ndat+1] = c(rep(-1, ndat), 0)
#C = mat[1:ndat, 1:ndat]
#J= rep(1, 4)
#solve(C) %*% J %*% solve(t(J) %*% solve(C) %*% J)
cor.mat = matrix(nrow=ndat, ncol=ndat)
for (i in 1:ndat) {
for (j in 1:ndat) {
cor.mat[i, j ] = cor(Bk[[i]], Bk[[j]])
}
}
ws[q, ] = ((solve(mat) %*% c(rep(0, ndat), 1))[1:ndat])
cs[q, ] = mean(cor.mat[4,])
bs[q] = mean(Bk[[1]])
#cs[1, 1] = cor(Bk[[1]], Bk[[4]])
}
qplot(cs[, 4], ws[, 4], xlab="correlation with other studies", ylab="weight")
iq =2
for (q in 1:num) {
# merged design matrix
set.seed(q*iq)
#edat_train[[1]] = edat_train[[2]]
edat_train[[4]] = edat_train[[1]] - matrix(rnorm(nvar*40, 0, 0.006*q), nrow=40, ncol=nvar)
Rk = vector(mode="list", length=ndat)
# M_k = R_k + \lambdak * I^-
Mk = vector(mode="list", length=ndat)
Bk = vector(mode="list", length=ndat)
denom2k = vector(mode="list", length=ndat)
num1k = vector(mode="list", length=ndat)
Ck = rep(NA, ndat)
sigma = 0.1
lambdak = c(2, 2, 2, 2)
for (k in 1:ndat) {
Xk = as.matrix(edat_train[[k]])[, 1:nvar]
Rk[[k]] = t(Xk) %*% Xk
Mk[[k]] = Rk[[k]] + lambdak[k]*I #%*% solve(scale_mat_k[[k]]) %*% solve(scale_mat_k[[k]])
#denom2k[[k]] = wk[k]^2 * Rk[[k]] %*% solve(Mk[[k]]) %*%  t(test_mat) %*% test_mat %*% solve(Mk[[k]]) %*% Rk[[k]]
# solve(Mk) %*% Rk %*% Rk %*% solve(Mk) %*% R0
Ck[k] = sigma^2 * tr(solve(Mk[[k]]) %*% solve(Mk[[k]]) %*% t(test_mat[, 1:nvar]) %*% test_mat[, 1:nvar] %*% Rk[[k]] %*% Rk[[k]]) +
sigma_eps^2*tr(solve(Mk[[k]]) %*% Rk[[k]] %*% solve(Mk[[k]]) %*% t(test_mat[, 1:nvar]) %*% test_mat[, 1:nvar])
#num1k[[k]] = wk[k]^2 * tr(test_mat %*% solve(Mk[[k]]) %*% Rk[[k]] %*% solve(Mk[[k]]) %*% t(test_mat))
Bk[[k]] = lambdak[k]*test_mat[, 1:nvar] %*% solve(Mk[[k]]) %*% beta[1:nvar]
}
mat = matrix(NA, ncol=ndat+1,nrow=ndat+1)
for (i in 1:ndat) {
for (j in 1:ndat) {
if(i==j) {
mat[i, j] = 2*Ck[i] + 2*t(Bk[[i]]) %*% Bk[[i]]
} else {
mat[i, j] =  t(Bk[[i]] ) %*% Bk[[j]]
}
}
}
mat[ndat+1,] = 1
mat[,ndat+1] = c(rep(-1, ndat), 0)
#C = mat[1:ndat, 1:ndat]
#J= rep(1, 4)
#solve(C) %*% J %*% solve(t(J) %*% solve(C) %*% J)
cor.mat = matrix(nrow=ndat, ncol=ndat)
for (i in 1:ndat) {
for (j in 1:ndat) {
cor.mat[i, j ] = cor(Bk[[i]], Bk[[j]])
}
}
ws[q, ] = ((solve(mat) %*% c(rep(0, ndat), 1))[1:ndat])
cs[q, ] = mean(cor.mat[4,])
bs[q] = mean(Bk[[1]])
#cs[1, 1] = cor(Bk[[1]], Bk[[4]])
}
dim(cs)
dim(cs1)
cs2 = rbind(cs, cs1)
ws2 = rbind(ws, ws1)
qplot(cs2[, 4], ws2[, 4], xlab="correlation with other studies", ylab="weight")
dim(edat_train[[1]])
qplot(cs2[, 4], ws2[, 4]*4/3, xlab="correlation with other studies", ylab="weight")
qplot(cs2[, 4], ws2[, 4]*4/2, xlab="correlation with other studies", ylab="weight")
qplot(cs2[, 4], ws2[, 4]*4/2, xlab="correlation with study 1", ylab="weight")
setwd("~/Dropbox (Partners HealthCare)/R/transition_point")
load("transition_point_thm1_opt.RData")
source('transition_point_fns.R')
getwd()
setwd("~/Dropbox (Partners HealthCare)/R/transition_point")
setwd("~/Dropbox (Partners HealthCare)/R/transition_point/TransitionPoint/transition_point")
load("transition_point_thm1_opt.RData")
load("/Users/guanp123/Dropbox (Partners HealthCare)/R/transition_point/sim_oct/sim_nov/sim_nov_updated/transition_point_thm1_opt.RData")
source('transition_point_fns.R')
source('sim_fns_2.R')
ratio = data.frame(sigma2 = sigma2.vals,
csl=err$csl / err$merged,
lasso=err$lasso.csl / err$lasso.m,
ridge=err$ridge.csl / err$ridge.m,
rf=err$rf.csl / err$rf.m,
nn=err$nn.csl / err$nn.m)
ratio.lo = ratio
ratio.hi = ratio
for (i in 1:length(sigma2.vals)) {
res.boot = boot_ci(200, results[[i]], "merged", "csl")
ratio.lo$csl[i] = quantile(res.boot[[3]], 0.025)
ratio.hi$csl[i] = quantile(res.boot[[3]], 0.975)
}
### MSE ratio plots
load("hyperparams_thm1.RData")
sweet.spots = rep(NA, length(sigma2.vals))
for (i in 1:length(sigma2.vals)) {
sigma2_temp = rep(sigma2.vals[i], nvar)
sigma2_temp[-cols_re] = 0
sweet.spots[i] = sweet_spot(edat_train, edat_test, optimal_weights(edat_train, edat_test, sigma_eps, sigma2_temp), sigma_eps, cols_re=cols_re)
}
sigma2.vals = sigma2.vals*(length(cols_re)/nvar)
bar.width = .007
sh=0.03
p1 = qplot(sigma2.vals, log(ratio$csl)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=sigma2.vals[5], color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$csl)+sh, ymax=log(ratio.hi$csl)+sh), width=bar.width) +
ggtitle("Least Squares") +
theme(text = element_text(size=9))
p1
q1
p1
### transition point
set.seed(123)
cols_re = sample(1:nvar, 5)
sigma2_bar = tau_r(edat_train, edat_test, rep(1/ndat, ndat), sigma_eps,
cols_re=cols_re, beta=beta,
lambda=lambda.ridge, lambdak=rep(lambdak.ridge, ndat),
scale_mat = scale_glmnet(edat_train),
scale_mat_k = scale_k_glmnet(edat_train))
sigma2_star = (nvar/length(cols_re))*sigma2_bar
sigma2_temp = rep(sigma2_star, nvar)
sigma2_temp[-cols_re] = 0
wk = optimal_weights(edat_train, edat_test, sigma_eps, sqrt(sigma2_temp))
sweet_spot_temp = tau_r(edat_train, edat_test, wk, sigma_eps,
cols_re=cols_re, beta=beta,
lambda=lambda.ridge, lambdak=rep(lambdak.ridge, ndat),
scale_mat = scale_glmnet(edat_train),
scale_mat_k = scale_k_glmnet(edat_train))
dec = 0.0001
tol = 0.0001
while (sweet_spot_temp < sigma2_star & abs(sweet_spot_temp-sigma2_star)>tol) {
sigma2_star = sigma2_star-dec
sigma2_temp = rep(sigma2_star, nvar)
sigma2_temp[-cols_re] = 0
wk = optimal_weights(edat_train, edat_test, sigma_eps, sqrt(sigma2_temp))
sweet_spot_temp = tau_r(edat_train, edat_test, wk, sigma_eps,
cols_re=cols_re, beta=beta,
lambda=lambda.ridge, lambdak=rep(lambdak.ridge, ndat),
scale_mat = scale_glmnet(edat_train),
scale_mat_k = scale_k_glmnet(edat_train))
}
sigma2_star
sweet_spot_temp
load("transition_point_thm1_ridge_est.RData")
load("/Users/guanp123/Dropbox (Partners HealthCare)/R/transition_point/TransitionPoint/transition_point_thm1_ridge_est.RData")
head(resutls)
head(results)
head(err)
ratio = data.frame(sigma2 = sigma2.vals,
csl=err$csl / err$merged,
lasso=err$lasso.csl / err$lasso.m,
ridge=err$ridge.csl / err$ridge.m,
rf=err$rf.csl / err$rf.m,
nn=err$nn.csl / err$nn.m)
ratio.lo = ratio
ratio.hi = ratio
results[[1]]$ridge.csl
for (i in 1:length(sigma2.vals)) {
res.boot = boot_ci(200, results[[i]], "ridge.merged", "ridge.csl")
ratio.lo$csl[i] = quantile(res.boot[[3]], 0.025)
ratio.hi$csl[i] = quantile(res.boot[[3]], 0.975)
}
i=1
res.boot = boot_ci(200, results[[i]], "ridge.merged", "ridge.csl")
names(results[[1]])
for (i in 1:length(sigma2.vals)) {
res.boot = boot_ci(200, results[[i]], "ridge.m", "ridge.csl")
ratio.lo$csl[i] = quantile(res.boot[[3]], 0.025)
ratio.hi$csl[i] = quantile(res.boot[[3]], 0.975)
}
sweet.spots = rep(NA, length(sigma2.vals))
for (i in 1:length(sigma2.vals)) {
sigma2_temp = rep(sigma2.vals[i], nvar)
sigma2_temp[-cols_re] = 0
sweet.spots[i] = sweet_spot(edat_train, edat_test, optimal_weights(edat_train, edat_test, sigma_eps, sigma2_temp), sigma_eps, cols_re=cols_re)
}
sigma2.vals
sigma2.vals[5]
sqrt(sigma2.vals[5])
load("/Users/guanp123/Dropbox (Partners HealthCare)/R/transition_point/TransitionPoint/transition_point_thm1_ridge_est.RData")
sigma2.vals
sigma2_star
seq(0, sigma2_star*5, length=12)
seq(0, sigma2_star*5, length=11)
sigma2.vals = seq(0, sigma2_star*5, length=11)
0.24318674+(-0.21886807 +0.24318674)
sigma2.vals = c(seq(0, sigma2_star*5, length=11), 0.2675054)
sigma2.vals
seq(0, sigma2_star*5, length=11)
seq(0, sigma2_star*4, length=11)
seq(0, sigma2_star*4, length=12)
seq(0, sigma2_star*3, length=12)
seq(0, sigma2_star*3, length=13)
length(c(seq(0, sigma2_star*5, length=11), 0.2675054))
sigma2.vals = seq(0, sigma2_star*3, length=13)[1:12]
sigma2.vals
ratio$csl
bar.width = .007
sh=0.03
p1 = qplot(sigma2.vals, log(ratio$csl)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=sigma2.vals[5], color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$csl)+sh, ymax=log(ratio.hi$csl)+sh), width=bar.width) +
ggtitle("Least Squares") +
theme(text = element_text(size=9))
p1
pq
p1
p1
ratio.lo$csl
ratio$ridge
p1 = qplot(sigma2.vals, log(ratio$ridge)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=sigma2.vals[5], color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$csl)+sh, ymax=log(ratio.hi$csl)+sh), width=bar.width) +
ggtitle("Least Squares") +
theme(text = element_text(size=9))
p1
png('plots_thm1_ridge_est.png', width=800, height=600, res=100)
p1
dev.off()
p2 = qplot(sigma2.vals, log(ratio$ridge)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=sigma2.vals[5], color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$csl)+sh, ymax=log(ratio.hi$csl)+sh), width=bar.width) +
ggtitle("Least Squares") +
theme(text = element_text(size=9))
p2
sh=0.03
p2 = qplot(sigma2.vals, log(ratio$ridge)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=sigma2.vals[5], color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$csl)+sh, ymax=log(ratio.hi$csl)+sh), width=bar.width) +
ggtitle("Ridge Regression") +
theme(text = element_text(size=9))
png('plots_thm1_ridge_est.png', width=800, height=600, res=100)
p2
dev.off()
ratio.lo$csl
ratio.hi$csl
sh=0.03
p2 = qplot(sigma2.vals, log(ratio$ridge)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=sigma2.vals[5], color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$csl+0.0002)+sh, ymax=log(ratio.hi$csl-0.0002)+sh), width=bar.width) +
ggtitle("Ridge Regression") +
theme(text = element_text(size=9))
p2
p2
png('plots_thm1_ridge_est.png', width=800, height=600, res=100)
p2
dev.off()
load("/Users/guanp123/Dropbox (Partners HealthCare)/R/transition_point/sim_oct/sim_nov/sim_nov_updated/transition_point_thm1_opt.RData")
ratio = data.frame(sigma2 = sigma2.vals,
csl=err$csl / err$merged,
lasso=err$lasso.csl / err$lasso.m,
ridge=err$ridge.csl / err$ridge.m,
rf=err$rf.csl / err$rf.m,
nn=err$nn.csl / err$nn.m)
ratio.lo = ratio
ratio.hi = ratio
### bootstrap CIs for MSE ratio comparing each CSL learner to the corresponding merged learner
for (i in 1:length(sigma2.vals)) {
res.boot = boot_ci(200, results[[i]], "merged", "csl")
ratio.lo$csl[i] = quantile(res.boot[[3]], 0.025)
ratio.hi$csl[i] = quantile(res.boot[[3]], 0.975)
}
### MSE ratio plots
load("hyperparams_thm1.RData")
sweet.spots = rep(NA, length(sigma2.vals))
for (i in 1:length(sigma2.vals)) {
sigma2_temp = rep(sigma2.vals[i], nvar)
sigma2_temp[-cols_re] = 0
sweet.spots[i] = sweet_spot(edat_train, edat_test, optimal_weights(edat_train, edat_test, sigma_eps, sigma2_temp), sigma_eps, cols_re=cols_re)
}
sigma2.vals = sigma2.vals*(length(cols_re)/nvar)
bar.width = .007
sh=0.03
p1 = qplot(sigma2.vals, log(ratio$csl)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=sigma2.vals[5], color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$csl)+sh, ymax=log(ratio.hi$csl)+sh), width=bar.width) +
ggtitle("Least Squares") +
theme(text = element_text(size=9))
png('plots_thm1_opt_est.png', width=800, height=600, res=100)
p1
dev.off()
ratio.lo$ridge
ratio.lo$csl
ratio$ridge
sh=0.03
p2 = qplot(sigma2.vals, log(ratio$ridge)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=sigma2.vals[5], color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$ridge+0.0002)+sh, ymax=log(ratio.hi$ridge-0.0002)+sh), width=bar.width) +
ggtitle("Ridge Regression") +
theme(text = element_text(size=9))
p2
ratio.lo$ridge
ratio.hi$ridge
names(results[[1]])
for (i in 1:length(sigma2.vals)) {
res.boot = boot_ci(200, results[[i]], "ridge.m", "ridge.csl")
ratio.lo$ridge[i] = quantile(res.boot[[3]], 0.025)
ratio.hi$ridge[i] = quantile(res.boot[[3]], 0.975)
}
ratio.lo$ridge
ratio.hi$ridge
sh=0.03
p2 = qplot(sigma2.vals, log(ratio$ridge)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=sigma2.vals[5], color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$ridge+0.0002)+sh, ymax=log(ratio.hi$ridge-0.0002)+sh), width=bar.width) +
ggtitle("Ridge Regression") +
theme(text = element_text(size=9))
p2
sigma2.vals
sigma2_star
sweet_spot_temp
sigma2_bar
sigma2_star
sweet_spot_temp
set.seed(123)
cols_re = sample(1:nvar, 5)
sigma2_bar = tau_r(edat_train, edat_test, rep(1/ndat, ndat), sigma_eps,
cols_re=cols_re, beta=beta,
lambda=lambda.ridge, lambdak=rep(lambdak.ridge, ndat),
scale_mat = scale_glmnet(edat_train),
scale_mat_k = scale_k_glmnet(edat_train))
sigma2_star = (nvar/length(cols_re))*sigma2_bar
sigma2_temp = rep(sigma2_star, nvar)
sigma2_temp[-cols_re] = 0
wk = optimal_weights(edat_train, edat_test, sigma_eps, sqrt(sigma2_temp))
sweet_spot_temp = tau_r(edat_train, edat_test, wk, sigma_eps,
cols_re=cols_re, beta=beta,
lambda=lambda.ridge, lambdak=rep(lambdak.ridge, ndat),
scale_mat = scale_glmnet(edat_train),
scale_mat_k = scale_k_glmnet(edat_train))
dec = 0.0001
tol = 0.0001
while (sweet_spot_temp < sigma2_star & abs(sweet_spot_temp-sigma2_star)>tol) {
sigma2_star = sigma2_star-dec
sigma2_temp = rep(sigma2_star, nvar)
sigma2_temp[-cols_re] = 0
wk = optimal_weights(edat_train, edat_test, sigma_eps, sqrt(sigma2_temp))
sweet_spot_temp = tau_r(edat_train, edat_test, wk, sigma_eps,
cols_re=cols_re, beta=beta,
lambda=lambda.ridge, lambdak=rep(lambdak.ridge, ndat),
scale_mat = scale_glmnet(edat_train),
scale_mat_k = scale_k_glmnet(edat_train))
}
sigma2_star
sweet_spot_temp
sh=0.03
p2 = qplot(sigma2.vals, log(ratio$ridge)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=0.036, color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$ridge)+sh, ymax=log(ratio.hi$ridge)+sh), width=bar.width) +
ggtitle("Ridge Regression") +
theme(text = element_text(size=9))
p2
p2 = qplot(sigma2.vals, log(ratio$ridge)+sh, size=I(0.8), xlab=expression(bar(sigma^2)),
ylab=expression( paste("log", bgroup("(", frac( "MSPE"["CSL"], "MSPE"["Merged"]), ")" ) ))) +
#geom_vline(xintercept=sigma_star, color='red', linetype = "longdash") +
geom_vline(xintercept=0.048, color='red', linetype = "longdash") +
#geom_vline(xintercept=min(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
#geom_vline(xintercept=max(sweet.spots), color='red', linetype = "longdash", alpha=0.5) +
geom_hline(yintercept=0, color='blue', linetype = "longdash") +
#geom_text(aes(sigma_star, 1, label="theoretical transition point", hjust=1.1, vjust=-1), colour="red", angle=90) +
geom_errorbar(aes(ymin=log(ratio.lo$ridge)+sh, ymax=log(ratio.hi$ridge)+sh), width=bar.width) +
ggtitle("Ridge Regression") +
theme(text = element_text(size=9))
p2
p2
png('plots_thm1_ridge_est.png', width=800, height=600, res=100)
p2
dev.off()
head(ratio)
png('plots_thm1_ridge_est.png', width=800, height=500, res=100)
p2
dev.off()
png('plots_thm1_opt_est.png', width=800, height=500, res=100)
p1
dev.off()
png('plots_thm1_opt_est.png', width=800, height=500, res=150)
p1
dev.off()
png('plots_thm1_ridge_est.png', width=800, height=500, res=150)
p2
dev.off()
summary(ws2[, 4])
qplot(cs2[, 4], ws2[, 4]*4/3, xlab="correlation with study 1", ylab="weight")
